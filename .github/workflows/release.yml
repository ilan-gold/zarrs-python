name: Make a release and publish it to GitHub and PyPI

on:
  push:
    branches:
      - main
    tags:
      - '**'
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: build on ${{ matrix.os }} (${{ matrix.target }} - ${{ matrix.interpreter || 'all' }}${{ matrix.os == 'linux' && format(' - {0}', matrix.manylinux == 'auto' && 'manylinux' || matrix.manylinux) || '' }})
    # only run on push to main and on release
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
    strategy:
      fail-fast: false
      matrix:
        os: [linux, macos, windows]
        target: [x86_64, aarch64]
        manylinux: [auto]
        include:
          # manylinux for various platforms
          - { os: linux, manylinux: auto, target: i686 }
          - { os: linux, manylinux: auto, target: aarch64 }
          - { os: linux, manylinux: auto, target: armv7 }
          - { os: linux, manylinux: auto, target: ppc64le }
          - { os: linux, manylinux: auto, target: s390x }
          # musl
          - { os: linux, manylinux: musllinux_1_1, target: x86_64 }
          - { os: linux, manylinux: musllinux_1_1, target: aarch64 }
          - { os: linux, manylinux: musllinux_1_1, target: armv7 }
          # macos
          - { os: macos, target: x86_64 }
          - { os: macos, target: aarch64 }
          # windows
          - { os: windows, target: x86_64 }
          - { os: windows, target: i686, python-architecture: x86 }
          - { os: windows, target: aarch64 }
    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          architecture: ${{ matrix.python-architecture || 'x64' }}
      - uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: --release --out dist --interpreter ${{ matrix.interpreter || '3.11 3.12 3.13' }}
          rust-toolchain: stable
          docker-options: -e CI

  publish:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build
    environment: pypi
    permissions:
      id-token: write # to authenticate as Trusted Publisher to pypi.org
    steps:
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: target/wheels

  release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - uses: MarcoIeni/release-plz-action@v0.5
      with:
        # since we don’t publish to crates.io,
        # we only want the PR and don’t need to specify a token
        command: release-pr
